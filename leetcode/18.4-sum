/*
 * @lc app=leetcode id=18 lang=cpp
 *
 * [18] 4Sum
 *
 * https://leetcode.com/problems/4sum/description/
 *
 * algorithms
 * Medium (29.86%)
 * Total Accepted:    216.2K
 * Total Submissions: 723.9K
 * Testcase Example:  '[1,0,-1,0,-2,2]\n0'
 *
 * Given an array nums of n integers and an integer target, are there elements
 * a, b, c, and d in nums such that a + b + c + d = target? Find all unique
 * quadruplets in the array which gives the sum of target.
 * 
 * Note:
 * 
 * The solution set must not contain duplicate quadruplets.
 * 
 * Example:
 * 
 * 
 * Given array nums = [1, 0, -1, 0, -2, 2], and target = 0.
 * 
 * A solution set is:
 * [
 * ⁠ [-1,  0, 0, 1],
 * ⁠ [-2, -1, 1, 2],
 * ⁠ [-2,  0, 0, 2]
 * ]
 * 
 * 
 */
class Solution
{
  public:
    vector<vector<int>> fourSum(vector<int> &nums, int target)
    {
        vector<vector<int>> ret;
        sort(nums.begin(), nums.end());

        for (int i = 0; i < nums.size();)
        {
            for (int j = i + 1; j < nums.size();)
            {

                int start = j + 1;
                int end = nums.size() - 1;
                while (start < end)
                {

                    if (nums[start] + nums[end] > -nums[i])
                    {
                        end--;
                    }
                    else if (nums[start] + nums[end] < -nums[i])
                    {
                        start++;
                    }
                    else
                    {
                        vector<int> result;
                        result.push_back(nums[i]);
                        result.push_back(nums[start]);
                        result.push_back(nums[end]);
                        ret.push_back(result);
                        int a3 = nums[start];
                        int a4 = nums[end];
                        while (start < end && nums[start] == a4)
                        {
                            start++;
                        }
                        while (start < end && nums[end] == a4)
                        {
                            end--;
                        }
                    }
                }

                int a2 = nums[j];
                while (i < nums.size() && nums[i] == a1)
                {
                    i++;
                }
                while (j < nums.size() && nums[i] == a2)
                {
                    j++;
                }
            }
            int a1 = nums[i];
            while (i < nums.size() && nums[i] == a1)
            {
                i++;
            }
        }
        return ret;
    }
};
