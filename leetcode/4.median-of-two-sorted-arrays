/*
 * @lc app=leetcode id=4 lang=cpp
 *
 * [4] Median of Two Sorted Arrays
 *
 * https://leetcode.com/problems/median-of-two-sorted-arrays/description/
 *
 * algorithms
 * Hard (25.44%)
 * Total Accepted:    380.6K
 * Total Submissions: 1.5M
 * Testcase Example:  '[1,3]\n[2]'
 *
 * There are two sorted arrays nums1 and nums2 of size m and n respectively.
 * 
 * Find the median of the two sorted arrays. The overall run time complexity
 * should be O(log (m+n)).
 * 
 * You may assume nums1 and nums2 cannot be both empty.
 * 
 * Example 1:
 * 
 * 
 * nums1 = [1, 3]
 * nums2 = [2]
 * 
 * The median is 2.0
 * 
 * 
 * Example 2:
 * 
 * 
 * nums1 = [1, 2]
 * nums2 = [3, 4]
 * 
 * The median is (2 + 3)/2 = 2.5
 * 
 * 
 */
/*
 * @lc app=leetcode id=4 lang=cpp
 *
 * [4] Median of Two Sorted Arrays
 *
 * https://leetcode.com/problems/median-of-two-sorted-arrays/description/
 *
 * algorithms
 * Hard (25.44%)
 * Total Accepted:    380.6K
 * Total Submissions: 1.5M
 * Testcase Example:  '[1,3]\n[2]'
 *
 * There are two sorted arrays nums1 and nums2 of size m and n respectively.
 * 
 * Find the median of the two sorted arrays. The overall run time complexity
 * should be O(log (m+n)).
 * 
 * You may assume nums1 and nums2 cannot be both empty.
 * 
 * Example 1:
 * 
 * 
 * nums1 = [1, 3]
 * nums2 = [2]
 * 
 * The median is 2.0
 * 
 * 
 * Example 2:
 * 
 * 
 * nums1 = [1, 2]
 * nums2 = [3, 4]
 * 
 * The median is (2 + 3)/2 = 2.5
 * 
 * 
 */
class Solution
{
  public:
    double findMedianSortedArrays(vector<int> &nums1, vector<int> &nums2)
    {
        int len = nums1.size() + nums2.size();
        if (len % 2)
        {
            return ret=getKth(nums1, nums2, len / 2+1);
        }
        else
        {
            double ret =getKth(nums1, nums2, len / 2);
            double ret1= getKth(nums1, nums2, len / 2+1);
            return (ret+ret1)/2.0;
        }
        return 0;
    }
    int getKth(vector<int> nums1, vector<int> nums2, int k)
    {   
        if (nums1.size() > nums2.size())
        {
            return getKth(nums2, nums1, k);
        }
        if (!nums1.size())
        {
            return nums2[k-1];
        }
        if (k == 1)
        {
            return nums1[0] > nums2[0] ? nums2[0] : nums1[0];
        }
        int tmp1 = nums1.size() > k / 2 ? k / 2 : nums1.size();
        int tmp2 = k - tmp1;
        if (nums1[tmp1 - 1] > nums2[tmp2 - 1])
        {
            return getKth(vector<int> (nums1.begin(),nums1.begin()+tmp1), vector<int> (nums2.begin()+tmp2,nums2.end()), k - tmp2);
        }
        else if (nums1[tmp1 - 1] < nums2[tmp2 - 1])
        {
            return getKth(vector<int> (nums1.begin()+tmp1,nums1.end()), vector<int> (nums2.begin(),nums2.begin()+tmp2), k - tmp1);
        }
        else
        {
            return nums1[tmp1 - 1];
        }
        return 0;
    }
};

