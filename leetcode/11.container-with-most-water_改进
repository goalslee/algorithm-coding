/*
 * @lc app=leetcode id=11 lang=cpp
 *
 * [11] Container With Most Water
 *
 * https://leetcode.com/problems/container-with-most-water/description/
 *
 * algorithms
 * Medium (42.97%)
 * Total Accepted:    328.5K
 * Total Submissions: 764.6K
 * Testcase Example:  '[1,8,6,2,5,4,8,3,7]'
 *
 * Given n non-negative integers a1, a2, ..., an , where each represents a
 * point at coordinate (i, ai). n vertical lines are drawn such that the two
 * endpoints of line i is at (i, ai) and (i, 0). Find two lines, which together
 * with x-axis forms a container, such that the container contains the most
 * water.
 * 
 * Note: You may not slant the container and n is at least 2.
 * 
 * 
 * 
 * 
 * 
 * The above vertical lines are represented by array [1,8,6,2,5,4,8,3,7]. In
 * this case, the max area of water (blue section) the container can contain is
 * 49. 
 * 
 * 
 * 
 * Example:
 * 
 * 
 * Input: [1,8,6,2,5,4,8,3,7]
 * Output: 49
 * 
 
 思路：从两头开始，本质是取消了O(n^2)中多余的比较，最终只需比较n次，即其实每个元素均与其他元素遍历完成了比较，但是去掉了多余的
 [a,b]中若a小，因为取决于最低点，则a再与比b下标小的构成整体也不会大于现在。所以可以取消掉中间的比较
 a的下标往后，[a+1,b]有可能大于[a,b]
 
 */
class Solution
{
  public:
    int maxArea(vector<int> &height)
    {
        int max = 0;
        int begin = 0;
        int end = height.size() - 1;
        while (begin != end)
        {
            int h = 0;
            int tmp_max=0;
            if (height[begin] > height[end])
            {
                h = height[end];
                tmp_max= (end - begin) * h;
                end--;
            }
            else
            {
                h = height[begin];
                tmp_max= (end - begin) * h;
                begin++;
            }
             
            max = tmp_max > max ? tmp_max : max;
        }

        return max;
    }
};
