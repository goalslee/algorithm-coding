/*
 * @lc app=leetcode id=16 lang=cpp
 *
 * [16] 3Sum Closest
 *
 * https://leetcode.com/problems/3sum-closest/description/
 *
 * algorithms
 * Medium (41.48%)
 * Total Accepted:    296.1K
 * Total Submissions: 713.5K
 * Testcase Example:  '[-1,2,1,-4]\n1'
 *
 * Given an array nums of n integers and an integer target, find three integers
 * in nums such that the sum is closest to target. Return the sum of the three
 * integers. You may assume that each input would have exactly one solution.
 * 
 * Example:
 * 
 * 
 * Given array nums = [-1, 2, 1, -4], and target = 1.
 * 
 * The sum that is closest to the target is 2. (-1 + 2 + 1 = 2).
 * 
 * 
 */
class Solution
{
  public:
    int threeSumClosest(vector<int> &nums, int target)
    {
        int p_ret = 1000000;
        int n_ret = -1000000;
        sort(nums.begin(), nums.end());

        for (int i = 0; i < nums.size();)
        {
            int start = i + 1;
            int end = nums.size() - 1;
            while (start < end)
            {
                int tmp_ret = nums[start] + nums[end] + nums[i] - target;
                if (tmp_ret > 0)
                {
                    if (tmp_ret < p_ret)
                    {
                        p_ret = tmp_ret;
                    }
                    end--;
                }
                else if (tmp_ret < 0)
                {
                    if (tmp_ret > n_ret)
                    {
                        n_ret = tmp_ret;
                    }
                    start++;
                }
                else
                {
                    return target;
                }
            }
            int a1 = nums[i];
            while (i < nums.size() && nums[i] == a1)
            {
                i++;
            }
        }
       
        return -n_ret<p_ret?target+n_ret:target+p_ret;
    }
};
