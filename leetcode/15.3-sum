/*
 * @lc app=leetcode id=15 lang=cpp
 *
 * [15] 3Sum
 *
 * https://leetcode.com/problems/3sum/description/
 *
 * algorithms
 * Medium (23.56%)
 * Total Accepted:    497.3K
 * Total Submissions: 2.1M
 * Testcase Example:  '[-1,0,1,2,-1,-4]'
 *
 * Given an array nums of n integers, are there elements a, b, c in nums such
 * that a + b + c = 0? Find all unique triplets in the array which gives the
 * sum of zero.
 * 
 * Note:
 * 
 * The solution set must not contain duplicate triplets.
 * 
 * Example:
 * 
 * 
 * Given array nums = [-1, 0, 1, 2, -1, -4],
 * 
 * A solution set is:
 * [
 * ⁠ [-1, 0, 1],
 * ⁠ [-1, -1, 2]
 * ]
 * 
 * 思路：先固定第一个，再固定第二个，再找第三个，需要O(n^3),然后去重(如何去重？)
 * 解决思路：先对数组排序，有序且相同元素排在一起这个是关键。固定第一个，然后从首尾开始匹配；匹配到就不要这两个数字；最后排除第一个数字
 */
class Solution
{
  public:
    vector<vector<int> > threeSum(vector<int> &nums)
    {
        vector<vector<int> > ret;
        sort(nums.begin(), nums.end());

        for (int i = 0; i < nums.size(); )
        {
            int start = i + 1;
            int end = nums.size() - 1;
            while (start < end)
            {   

                if (nums[start] + nums[end] > -nums[i])
                {
                    end--;
                }
                else if (nums[start] + nums[end] < -nums[i])
                {
                    start++;
                }
                else
                {
                    vector<int> result;
                    result.push_back(nums[i]);
                    result.push_back(nums[start]);
                    result.push_back(nums[end]);
                    ret.push_back(result);
                    int a2 = nums[start];
                    int a3 = nums[end];
                    while (start < end && nums[start] == a2)
                    {
                        start++;
                    }
                    while (start < end && nums[end] == a3)
                    {
                        end--;
                    }
                }
            }
            int a1 = nums[i];
            while (i < nums.size() && nums[i]==a1)
            {
                i++;
            }
        }
        return ret;
    }
};
